(define add-node 
	(lambda (elem arbol)
		(if (null? arbol)
			(list elem #f #f)
			(let temp ((elem elem) (arbol arbol) (left (car (cdr arbol))) (right (car (cddr arbol))))
				(cond 
					((< elem (car arbol))
						(if (equal? #f left) 
							(list (car arbol) (list elem #f #f) left)
							(list (car arbol) (add-node elem left) right)
						)
					)
					((> elem (car arbol))
						(if (equal? #f right)
                                (list (car arbol) left (list elem #f #f))
                                (list (car arbol) left (add-node elem right))
						)
					)
					((= elem (car arbol))
						arbol
					)
				)
			)
		)
	)
)
